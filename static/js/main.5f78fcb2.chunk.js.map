{"version":3,"sources":["components/TodoForm.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoForm","todos","handleAdd","useState","text","setText","onSubmit","e","preventDefault","id","Math","max","map","todo","done","type","placeholder","value","onChange","target","TodoItem","handleToggle","handleRemove","className","onClick","TodoList","list","key","App","setTodos","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAiCeA,MA9Bf,YAA0F,IAAtEC,EAAqE,EAArEA,MAAOC,EAA8D,EAA9DA,UAA8D,EAC7DC,mBAAS,IADoD,mBAC9EC,EAD8E,KACxEC,EADwE,KAiBrF,OACI,0BAAMC,SAXO,SAACC,GACdA,EAAEC,iBACFN,EAAU,CACNO,GAAIC,KAAKC,IAAL,MAAAD,KAAI,CAAK,GAAL,mBAAWT,EAAMW,KAAI,SAAAC,GAAI,OAAIA,EAAKJ,SAAO,EACjDL,OACAU,MAAM,IAEVT,EAAQ,MAKJ,2BACIU,KAAK,OACLC,YAAY,OACZC,MAAOb,EACPc,SApBK,SAACX,GACdF,EAAQE,EAAEY,OAAOF,UAqBb,4BAAQF,KAAK,UAAb,S,MCfGK,MATf,YAA4J,IAAxIP,EAAuI,EAAvIA,KAAMQ,EAAiI,EAAjIA,aAAcC,EAAmH,EAAnHA,aACpC,OACI,yBAAKC,UAAWV,EAAKC,KAAO,OAAS,IACjC,0BAAMS,UAAU,OAAOC,QAAS,kBAAMH,EAAaR,EAAKJ,MAAMI,EAAKT,MACnE,0BAAMmB,UAAU,SAASC,QAAS,kBAAMF,EAAaT,EAAKJ,MAA1D,SCKGgB,MATf,YAAkJ,IAA9HxB,EAA6H,EAA7HA,MAAOoB,EAAsH,EAAtHA,aAAcC,EAAwG,EAAxGA,aAC/BI,EAAOzB,EAAMW,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUc,IAAKd,EAAKJ,GAAII,KAAMA,EAAMQ,aAAcA,EAAcC,aAAcA,OAC7G,OACI,6BACKI,ICoBEE,MAvBf,WAAgB,IAAD,EACazB,mBAAgB,IAD7B,mBACNF,EADM,KACC4B,EADD,KAeb,OACE,6BACE,kBAAC,EAAD,CAAU5B,MAAOA,EAAOC,UAdV,SAACW,GACjBgB,EAAS5B,EAAM6B,OAAOjB,OAcpB,kBAAC,EAAD,CAAUZ,MAAOA,EAAOoB,aAXP,SAACZ,GACpBoB,EAAS5B,EAAMW,KAAI,SAAAC,GAAI,OAAIA,EAAKJ,KAAOA,EAAZ,2BAAqBI,GAArB,IAA2BC,MAAOD,EAAKC,OAAQD,OAUpBS,aAPnC,SAACb,GACpBoB,EAAS5B,EAAM8B,QAAO,SAAAlB,GAAI,OAAIA,EAAKJ,KAAOA,WCL1BuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5f78fcb2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Todos, Todo } from '../type/Todo';\r\n\r\nfunction TodoForm({ todos, handleAdd }: {todos: Todos, handleAdd: (todo: Todo) => void}) {\r\n    const [text, setText] = useState('');\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.target.value);\r\n    };\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        handleAdd({\r\n            id: Math.max(0, ...todos.map(todo => todo.id)) + 1,\r\n            text,\r\n            done: false\r\n        });\r\n        setText('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"text\"\r\n                value={text}\r\n                onChange={onChange}\r\n            />\r\n            <button type=\"submit\">add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React from 'react'\r\nimport { Todo } from '../type/Todo';\r\nimport './TodoItem.css';\r\n\r\nfunction TodoItem({ todo, handleToggle, handleRemove }: {key: number, todo: Todo, handleToggle: (id: number) => void, handleRemove: (id: number) => void}) {\r\n    return (\r\n        <div className={todo.done ? 'done' : ''}>\r\n            <span className=\"text\" onClick={() => handleToggle(todo.id)}>{todo.text}</span>\r\n            <span className=\"remove\" onClick={() => handleRemove(todo.id)}>(X)</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport { Todos } from '../type/Todo';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction TodoList({ todos, handleToggle, handleRemove }: {todos: Todos, handleToggle: (id: number) => void, handleRemove: (id: number) => void}) {\r\n    const list = todos.map(todo => <TodoItem key={todo.id} todo={todo} handleToggle={handleToggle} handleRemove={handleRemove} />);\r\n    return (\r\n        <div>\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport { Todos, Todo } from './type/Todo';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState<Todos>([]);\n\n  const handleAdd = (todo: Todo): void => {\n    setTodos(todos.concat(todo));\n  };\n\n  const handleToggle = (id: number): void => {\n    setTodos(todos.map(todo => todo.id === id ? {...todo, done: !todo.done} : todo));\n  };\n\n  const handleRemove = (id: number): void => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  return (\n    <div>\n      <TodoForm todos={todos} handleAdd={handleAdd} />\n      <TodoList todos={todos} handleToggle={handleToggle} handleRemove={handleRemove} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}